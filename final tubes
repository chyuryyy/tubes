package main
import "fmt"

const maksimumData = 100

type Spending struct {
	kategori string
	jumlah int
}

func menUtama() {
	fmt.Println()
	fmt.Println("==============================================")
	fmt.Println("|         SELAMAT DATANG DI APLIKASI         |")
	fmt.Println("|             BUDGET TRAVELING!              |")
	fmt.Println("==============================================")
	fmt.Println("| MENU UTAMA                                 |")
	fmt.Println("==============================================")
	fmt.Println("|  1 | Masukkan/Update total budget          |")
	fmt.Println("|  2 | Tambah pengeluaran                    |")
	fmt.Println("|  3 | Ubah pengeluaran                      |")
	fmt.Println("|  4 | Hapus pengeluaran                     |")
	fmt.Println("|  5 | Cari pengeluaran (Sequential Search)  |")
	fmt.Println("|  6 | Cari pengeluaran (Binary Search)      |")
	fmt.Println("|  7 | Urutkan berdasarkan jumlah (Selection)|")
	fmt.Println("|  8 | Urutkan berdasarkan kategori (Insert) |")
	fmt.Println("|  9 | Tampilkan laporan                     |")
	fmt.Println("| 10 | Keluar                                |")
	fmt.Println("==============================================")
	fmt.Print("Silakan pilih menu (1-10): ")
}

func tampilkanData(pengeluaran [maksimumData]Spending, banyakData int){
	fmt.Println("\n===================================================")
	fmt.Println("| No |      Kategori      |    Jumlah (Rp)        |")
	fmt.Println("===================================================")
	if banyakData == 0 {
		fmt.Println("|          Belum ada data pengeluaran.           |")
		fmt.Println("===================================================")
		return
	}
	for i := 0; i < banyakData; i++ {
		fmt.Printf("| %2d | %-17s | %18d |\n", i+1, pengeluaran[i].kategori, pengeluaran[i].jumlah)
	}
	fmt.Println("===================================================")
	fmt.Printf("Total data pengeluaran: %d\n", banyakData)
}

func tambahData(pengeluaran *[maksimumData]Spending, jumlahData *int){
	if *jumlahData >= maksimumData {
		fmt.Println("Data pengeluaran sudah penuh. Hapus data dulu jika ingin menambah.")
		return
	}
	var kategoriBaru string
	var jumlahBaru int
	fmt.Println("\nTambah Pengeluaran Baru")
	fmt.Print("Masukkan kategori pengeluaran: ")
	fmt.Scan(&kategoriBaru)
	fmt.Print("Masukkan jumlah pengeluaran (Rp): ")
	fmt.Scan(&jumlahBaru)
	if kategoriBaru == "" || jumlahBaru <= 0 {
		fmt.Println("Kategori tidak boleh kosong dan jumlah harus lebih dari 0!")
		return
	}
	pengeluaran[*jumlahData] = Spending{kategori: kategoriBaru, jumlah: jumlahBaru}
	*jumlahData++
	fmt.Printf("Pengeluaran kategori '%s' berhasil ditambahkan!\n", kategoriBaru)
}

func ubahData(pengeluaran *[maksimumData]Spending, jumlahData int){
	if jumlahData == 0 {
		fmt.Println("Belum ada data yang bisa diubah.")
		return
	}
	fmt.Println("\nUbah Data Pengeluaran")
	tampilkanData(*pengeluaran, jumlahData)
	var posisi int
	fmt.Print("Masukkan nomor data yang ingin diubah: ")
	fmt.Scan(&posisi)
	if posisi < 1 || posisi > jumlahData {
		fmt.Println("Nomor tidak valid.")
		return
	}
	posisi--
	fmt.Printf("Kategori lama: %s, jumlah lama: %d\n", pengeluaran[posisi].kategori, pengeluaran[posisi].jumlah)
	fmt.Print("Masukkan kategori baru: ")
	fmt.Scan(&pengeluaran[posisi].kategori)
	fmt.Print("Masukkan jumlah baru (Rp): ")
	fmt.Scan(&pengeluaran[posisi].jumlah)
	fmt.Println("Data berhasil diubah. Jangan lupa cek anggaranmu!")
}

func hapusData(pengeluaran *[maksimumData]Spending, jumlahData *int){
	if *jumlahData == 0 {
		fmt.Println("Belum ada data untuk dihapus.")
		return
	}
	fmt.Println("\nHapus Data Pengeluaran")
	tampilkanData(*pengeluaran, *jumlahData)
	var posisi int
	fmt.Print("Masukkan nomor data yang ingin dihapus: ")
	fmt.Scan(&posisi)
	if posisi < 1 || posisi > *jumlahData {
		fmt.Println("Nomor tidak valid.")
		return
	}
	fmt.Printf("Yakin ingin menghapus data kategori '%s' sebesar Rp %d? (y/n): ", (*pengeluaran)[posisi-1].kategori, (*pengeluaran)[posisi-1].jumlah)
	var konfirmasi string
	fmt.Scan(&konfirmasi)
	if konfirmasi != "y" && konfirmasi != "Y" {
		fmt.Println("Penghapusan dibatalkan.")
		return
	}
	posisi--
	for i := posisi; i < *jumlahData-1; i++ {
		(*pengeluaran)[i] = (*pengeluaran)[i+1]
	}
	*jumlahData--
	fmt.Println("Data berhasil dihapus.")
}

func cariSequential(pengeluaran [maksimumData]Spending, jumlahData int){
	var i int
	if jumlahData == 0 {
		fmt.Println("Belum ada data pengeluaran untuk dicari.")
		return
	}
	var target string
	fmt.Print("Masukkan kategori yang ingin Anda cari: ")
	fmt.Scan(&target)
	jumlahDitemukan := 0
	for i = 0; i < jumlahData; i++ {
		if pengeluaran[i].kategori == target {
			fmt.Printf("Ditemukan: %s - Rp %d\n", pengeluaran[i].kategori, pengeluaran[i].jumlah)
			jumlahDitemukan++
		}
	}
	if jumlahDitemukan == 0 {
		fmt.Println("Data tidak ditemukan.")
	} else {
		fmt.Printf("Total ditemukan: %d data.\n", jumlahDitemukan)
	}
}

func insertionSortKategori(pengeluaran *[maksimumData]Spending, jumlahData int){
	var i, j int
	for i = 1; i < jumlahData; i++ {
		dataSimpan := pengeluaran[i]
		j = i - 1
		for j >= 0 && pengeluaran[j].kategori > dataSimpan.kategori {
			pengeluaran[j+1] = pengeluaran[j]
			j--
		}
		pengeluaran[j+1] = dataSimpan
	}
}

func cariBinary(pengeluaran [maksimumData]Spending, jumlahData int){
	var i int
	if jumlahData == 0 {
		fmt.Println("Belum ada data pengeluaran untuk dicari.")
		return
	}
	var target string
	fmt.Print("Masukkan kategori yang ingin Anda cari : ")
	fmt.Scan(&target)

	var temp [maksimumData]Spending
	for i = 0; i < jumlahData; i++ {
		temp[i] = pengeluaran[i]
	}
	insertionSortKategori(&temp, jumlahData)

	kiri := 0
	kanan := jumlahData - 1
	ditemukan := false
	for kiri <= kanan && !ditemukan {
		tengah := (kiri + kanan) / 2
		if temp[tengah].kategori == target {
			fmt.Printf("Ditemukan: %s - Rp %d\n", temp[tengah].kategori, temp[tengah].jumlah)
			ditemukan = true
		} else if target < temp[tengah].kategori {
			kanan = tengah - 1
		} else {
			kiri = tengah + 1
		}
	}
	if !ditemukan {
		fmt.Println("Data tidak ditemukan.")
	}
}

func selectionSortJumlah(pengeluaran *[maksimumData]Spending, jumlahData int){
	for i := 0; i < jumlahData-1; i++ {
		posisiTerkecil := i
		for j := i + 1; j < jumlahData; j++ {
			if pengeluaran[j].jumlah < pengeluaran[posisiTerkecil].jumlah {
				posisiTerkecil = j
			}
		}
		if posisiTerkecil != i {
			temp := pengeluaran[i]
			pengeluaran[i] = pengeluaran[posisiTerkecil]
			pengeluaran[posisiTerkecil] = temp
		}
	}
}

func saranHemat(pengeluaran [maksimumData]Spending, jumlahData int, anggaran int){
	var total int
	var idxTerbesar int
	for i := 0; i < jumlahData; i++ {
		total += pengeluaran[i].jumlah
		if pengeluaran[i].jumlah > pengeluaran[idxTerbesar].jumlah {
			idxTerbesar = i
		}
	}
	fmt.Printf("\nTotal pengeluaran saat ini: Rp %d\n", total)
	if anggaran == 0 {
		fmt.Println("Anggaran belum diatur. Silakan masukkan total budget perjalanan di menu 1.")
		return
	}
	if total > anggaran {
		fmt.Println("Waduh, pengeluaran Anda melebihi anggaran!")
		fmt.Printf("Saran: Kurangi pengeluaran pada kategori '%s' (Rp %d), atau tinjau ulang pengeluaran lain yang tidak penting.\n", pengeluaran[idxTerbesar].kategori, pengeluaran[idxTerbesar].jumlah)
		fmt.Println("Tips: Cari promo, atur prioritas, dan jangan lupa catat pengeluaran harian ya!")
	} else if total > anggaran*8/10 {
		fmt.Println("Pengeluaran Anda sudah lebih dari 80% dari budget.")
		fmt.Printf("Saran: Kontrol pengeluaran di kategori '%s' (Rp %d), hindari belanja impulsif.\n", pengeluaran[idxTerbesar].kategori, pengeluaran[idxTerbesar].jumlah)
	} else {
		fmt.Println("Pengeluaran masih aman. Pertahankan gaya hidup hematmu!")
	}
}

func tampilkanLaporan(pengeluaran [maksimumData]Spending, jumlahData int, anggaran int) {
	if jumlahData == 0 {
		fmt.Println("Belum ada data pengeluaran.")
		return
	}
	var total int
	fmt.Println("\n===================== LAPORAN PENGELUARAN ====================")
	fmt.Println("| No |      Kategori      |    Jumlah (Rp)        |")
	fmt.Println("==============================================================")
	for i := 0; i < jumlahData; i++ {
		fmt.Printf("| %2d | %-17s | %18d |\n", i+1, pengeluaran[i].kategori, pengeluaran[i].jumlah)
		total += pengeluaran[i].jumlah
	}
	fmt.Println("==============================================================")
	fmt.Printf("| %-19s | %18d |\n", "Total Pengeluaran", total)
	fmt.Printf("| %-19s | %18d |\n", "Anggaran Awal", anggaran)
	fmt.Printf("| %-19s | %18d |\n", "Selisih Anggaran", anggaran-total)
	fmt.Println("==============================================================")
	saranHemat(pengeluaran, jumlahData, anggaran)
}

func main() {
	var dataPengeluaran [maksimumData]Spending
	var jumlahData int
	var anggaranAwal int
	var pilihan int
	fmt.Println("=== Selamat datang di aplikasi pengelolaan budget traveling! ===")
	for {
		menUtama()
		fmt.Scan(&pilihan)
		if pilihan == 1 {
			fmt.Print("Masukkan total budget perjalanan Anda (Rp): ")
			fmt.Scan(&anggaranAwal)
			fmt.Println("Budget perjalanan berhasil disimpan/diupdate!")
		} else if pilihan == 2 {
			tambahData(&dataPengeluaran, &jumlahData)
		} else if pilihan == 3 {
			ubahData(&dataPengeluaran, jumlahData)
		} else if pilihan == 4 {
			hapusData(&dataPengeluaran, &jumlahData)
		} else if pilihan == 5 {
			cariSequential(dataPengeluaran, jumlahData)
		} else if pilihan == 6 {
			cariBinary(dataPengeluaran, jumlahData)
		} else if pilihan == 7 {
			if jumlahData == 0 {
				fmt.Println("Belum ada data untuk diurutkan.")
			} else {
				fmt.Println("\nData sebelum diurutkan berdasarkan jumlah:")
				tampilkanData(dataPengeluaran, jumlahData)
				selectionSortJumlah(&dataPengeluaran, jumlahData)
				fmt.Println("\nData setelah diurutkan berdasarkan jumlah (terkecil ke terbesar):")
				tampilkanData(dataPengeluaran, jumlahData)
			}
		} else if pilihan == 8 {
			if jumlahData == 0 {
				fmt.Println("Belum ada data untuk diurutkan.")
			} else {
				fmt.Println("\nData sebelum diurutkan berdasarkan kategori:")
				tampilkanData(dataPengeluaran, jumlahData)
				insertionSortKategori(&dataPengeluaran, jumlahData)
				fmt.Println("\nData setelah diurutkan berdasarkan kategori (A-Z):")
				tampilkanData(dataPengeluaran, jumlahData)
			}
		} else if pilihan == 9 {
			if anggaranAwal == 0 {
				fmt.Println("Silakan masukkan total budget perjalanan terlebih dahulu lewat menu 1.")
			} else {
				tampilkanLaporan(dataPengeluaran, jumlahData, anggaranAwal)
			}
		} else if pilihan == 10 {
			fmt.Println("Terima kasih sudah menggunakan aplikasi ini. Semoga liburanmu makin hemat dan menyenangkan!")
			return
		} else {
			fmt.Println("Pilihan tidak tersedia. Silakan coba lagi.")
		}
	}
}
